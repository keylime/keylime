import os
import platform
import tempfile
import unittest
from configparser import RawConfigParser

from keylime import config
from keylime.cmd import convert_config
from keylime.common.algorithms import Hash
from keylime.mba import mba

try:
    from keylime.mba.elparsing import tpm_bootlog_enrich
except Exception:
    unittest.skip(f"tpm_bootlog_enrich not available, architecture ({platform.machine()}) not supported")

TEMPLATES_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), "..", "templates"))


@unittest.skipIf(platform.machine() in ["ppc64le", "s390x"], "ppc64le and s390x are not supported")
class TestMBAParsing(unittest.TestCase):
    def test_parse_bootlog(self):
        """Test parsing binary measured boot event log"""
        # This test requires the verifier configuration file, so let's create
        # one with the default values to use, so that we do not depend on the
        # configuration files existing in the test system.
        with tempfile.TemporaryDirectory() as config_dir:
            # Let's write the config file for the verifier.
            verifier_config = convert_config.process_versions(["verifier"], TEMPLATES_DIR, RawConfigParser(), True)
            convert_config.output(["verifier"], verifier_config, TEMPLATES_DIR, config_dir)

            # As we want to use a config file from a different location, the
            # proper way would be to define an environment variable for the
            # module of interest, e.g. in our case it would be the
            # KEYLIME_VERIFIER_CONFIG variable. However, the config module
            # reads such env vars at first load, and there is no clean way
            # to have it re-read them, so for this test we will override it
            # manually.
            config.CONFIG_ENV["verifier"] = os.path.abspath(os.path.join(config_dir, "verifier.conf"))

            mba.load_imports()
            # Use the file that triggered https://github.com/keylime/keylime/issues/1153
            mb_log_path = os.path.abspath(os.path.join(os.path.dirname(__file__), "data/mb_log.b64"))
            with open(mb_log_path, encoding="utf-8") as f:
                # Read the base64 input and remove the newlines
                b64 = "".join(f.read().splitlines())
                pcr_hashes, boot_aggregates, measurement_data, failure = mba.bootlog_parse(b64, Hash.SHA256)

                self.assertFalse(
                    failure,
                    f"Parsing of measured boot log failed with: {list(map(lambda x: x.context, failure.events))}",
                )
                self.assertTrue(isinstance(pcr_hashes, dict))
                self.assertTrue(isinstance(boot_aggregates, dict))
                self.assertTrue(isinstance(measurement_data, dict))

    def test_vendor_db_enrichment_actual_hex(self):
        """Test vendor_db enrichment with actual hex string from real vendor_db event.

        Different versions of tpm2_eventlog may provide vendor_db data in different formats.
        This test uses actual hex data and verifies it gets normalized to signature list format.
        """
        # Actual vendor_db hex string from real EV_EFI_VARIABLE_AUTHORITY event.
        actual_vendor_db_hex = "dbed230279908843af772d65b1c35d3b308203943082027ca00302010202090083730d2b7280d15a300d06092a864886f70d01010b0500305f31163014060355040a0c0d526564204861742c20496e632e3121301f06035504030c18526564204861742053656375726520426f6f7420434120353122302006092a864886f70d0109011613736563616c657274407265646861742e636f6d301e170d3230303630393038313533365a170d3338303131383038313533365a305f31163014060355040a0c0d526564204861742c20496e432e3121301f06035504030c18526564204861742053656375726520426f6f7420434120353122302006092a864886f70d0109011613736563616c657274407265646861742e636f6d30820122300d06092a864886f70d01010105000382010f003082010a0282010100cebaea41171c81a18809bfa1d4a9fa532e9d9ebcfc3b289c3052a00bf4000f36c88341f6a9c915496564d5b2769e58c12e1eeacf93386b47d6ba92c5f800e777a55769df41b1c4905b2d20c174aa038680b6a459efa988445e5240d47715a104859ceff3c69ff30f0fd68446e466dc266ad6d88a6e474acae34c431574997a06328ce033bfe5f846673dea0e943bbf3ddd8bf67f308c45540ba4de23355a997305d880e765141a07302c7386b02da3a636a64d815d91a767bbea3b5b828a9ccf83da31d1543416bc1907172a944ef0cecf0dbaf4fbe4d44889238b8cdc8e4513d77aa8d5e5840313520206c2d590763ab5d7b89d7ab0c9d09869fb8e0d01f5850203010001a3533051301d0603551d0e04160414cc6fa5e72868ba494e939bbd680b9144769a9f8f301f0603551d23041830168014cc6fa5e72868ba494e939bbd680b9144769a9f8f300f0603551d130101ff040530030101ff300d06092a864886f70d01010b050003820101001de75e426a66cc723e9b5cc9afa3ca542eed64abc0b917be27a91e58b1593c4d1174d1971a520584058ad9f085c8f5ec8f9ce9e7086dbb3acbfa6f3c33e6784d75bddfc095729f0350d2752a7cb481e08762945cefcf6bda3ae3bf6e18743455500c22518eaa5830bebd3e304db697b5131b6daf6c183b714a09a18917a7e718f56d51b1d310c80ed6e43219024b1ab2d2dc29a326951d0106e452697806d3304444b07577cc54ade46e2222ff5dff93060cf9983a9c39b70c81d0f3f807a7098b6f9c8ae1adfc419850a65f0bbaa57f1cfc838d06592e9e6ebff43ec31a746625948a5dbf21b6139b9f67f87edc421f4c0edd88737d8c95d03f77c190b864f1"

        # Expected parsed format - certificate data without the GUID prefix.
        expected_cert_data = actual_vendor_db_hex[32:]  # Skip first 32 chars (16 bytes GUID).
        expected_parsed_format = [
            {"SignatureOwner": "0223eddb-9079-4388-af77-2d65b1c35d3b", "SignatureData": expected_cert_data}
        ]

        # Test event matching the structure from the debug logs.
        test_event = {
            "VariableName": "d719b2cb-3d3a-4596-a3bc-dad00e67656f",
            "UnicodeNameLength": 9,
            "VariableDataLength": len(actual_vendor_db_hex) // 2,
            "UnicodeName": "vendor_db",
            "VariableData": actual_vendor_db_hex,
        }

        # Apply vendor_db enrichment.
        tpm_bootlog_enrich.enrich_vendor_db_authority_variable(test_event)  # type: ignore[reportPossiblyUnboundVariable]

        # Verify that VariableData gets normalized to signature list format.
        self.assertIsInstance(test_event["VariableData"], list)
        self.assertEqual(len(test_event["VariableData"]), 1)

        signature = test_event["VariableData"][0]
        self.assertIn("SignatureOwner", signature)
        self.assertIn("SignatureData", signature)
        # pylint: disable=invalid-sequence-index
        self.assertEqual(signature["SignatureOwner"], expected_parsed_format[0]["SignatureOwner"])
        self.assertEqual(signature["SignatureData"], expected_parsed_format[0]["SignatureData"])
        # pylint: enable=invalid-sequence-index

    def test_vendor_db_enrichment_multiple_certificates_real_data(self):
        """Test vendor_db enrichment with real data containing multiple certificates.

        This test uses actual hex data from a real secureboot db variable containing
        multiple Microsoft certificates to verify correct parsing of complex vendor_db data.
        """
        # Real hex string from secureboot db variable with multiple certificates.
        # The format of db is similar to vendor_db, so we use it here to test tpm_bootlog_enrich with multiple certificates.
        real_vendor_db_hex = ""

        # Test event structure matching EV_EFI_VARIABLE_AUTHORITY format.
        test_event = {
            "VariableName": "d719b2cb-3d3a-4596-a3bc-dad00e67656f",
            "UnicodeNameLength": 9,
            "VariableDataLength": len(real_vendor_db_hex) // 2,
            "UnicodeName": "vendor_db",
            "VariableData": real_vendor_db_hex,
        }

        # Apply vendor_db enrichment
        tpm_bootlog_enrich.enrich_vendor_db_authority_variable(test_event)  # type: ignore[reportPossiblyUnboundVariable]

        # Verify enrichment results.
        self.assertIsInstance(test_event["VariableData"], list)
        # Real data should contain multiple certificates (4 in this case based on the structure).
        self.assertGreater(len(test_event["VariableData"]), 1, "Real vendor_db should contain multiple certificates")

        # Verify each certificate has the required structure.
        for i, signature in enumerate(test_event["VariableData"]):
            with self.subTest(certificate=i):
                self.assertIn("SignatureOwner", signature, f"Certificate {i} missing SignatureOwner")
                self.assertIn("SignatureData", signature, f"Certificate {i} missing SignatureData")

                # Verify SignatureOwner is a valid GUID format.
                guid = signature["SignatureOwner"]
                self.assertRegex(
                    guid,
                    r"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                    f"Certificate {i} has invalid GUID format: {guid}",
                )

                # Verify SignatureData is hex string and not empty.
                cert_data = signature["SignatureData"]
                self.assertIsInstance(cert_data, str, f"Certificate {i} SignatureData should be string")
                self.assertGreater(len(cert_data), 0, f"Certificate {i} SignatureData should not be empty")
                # Verify it's valid hex.
                try:
                    bytes.fromhex(cert_data)
                except ValueError:
                    self.fail(f"Certificate {i} SignatureData is not valid hex: {cert_data[:100]}...")

    def test_vendor_db_enrichment_preserves_signature_lists(self):
        """Test that enrichment preserves VariableData that's already in signature list format"""
        # VariableData that is already in the expected signature list format.
        signature_list_format = [
            {
                "SignatureOwner": "0223eddb-9079-4388-af77-2d65b1c35d3b",
                "SignatureData": "308203943082027ca00302010202090083730d2b7280d15a300d06092a864886f70d01010b0500305f31163014060355040a0c0d526564204861742c20496e632e3121301f06035504030c18526564204861742053656375726520426f6f7420434120353122302006092a864886f70d0109011613736563616c657274407265646861742e636f6d301e170d3230303630393038313533365a170d3338303131383038313533365a305f31163014060355040a0c0d526564204861742c20496e632e3121301f06035504030c18526564204861742053656375726520426f6f7420434120353122302006092a864886f70d0109011613736563616c657274407265646861742e636f6d30820122300d06092a864886f70d01010105000382010f003082010a0282010100cebaea41171c81a18809bfa1d4a9fa532e9d9ebcfc3b289c3052a00bf4000f36c88341f6a9c915496564d5b2769e58c12e1eeacf93386b47d6ba92c5f800e777a55769df41b1c4905b2d20c174aa038680b6a459efa988445e5240d47715a104859ceff3c69ff30f0fd68446e466dc266ad6d88a6e474acae34c431574997a06328ce033bfe5f846673dea0e943bbf3ddd8bf67f308c45540ba4de23355a997305d880e765141a07302c7386b02da3a636a64d815d91a767bbea3b5b828a9ccf83da31d1543416bc1907172a944ef0cecf0dbaf4fbe4d44889238b8cdc8e4513d77aa8d5e5840313520206c2d590763ab5d7b89d7ab0c9d09869fb8e0d01f5850203010001a3533051301d0603551d0e04160414cc6fa5e72868ba494e939bbd680b9144769a9f8f301f0603551d23041830168014cc6fa5e72868ba494e939bbd680b9144769a9f8f300f0603551d130101ff040530030101ff300d06092a864886f70d01010b050003820101001de75e426a66cc723e9b5cc9afa3ca542eed64abc0b917be27a91e58b1593c4d1174d1971a520584058ad9f085c8f5ec8f9ce9e7086dbb3acbfa6f3c33e6784d75bddfc095729f0350d2752a7cb481e08762945cefcf6bda3ae3bf6e18743455500c22518eaa5830bebd3e304db697b5131b6daf6c183b714a09a18917a7e718f56d51b1d310c80ed6e43219024b1ab2d2dc29a326951d0106e452697806d3304444b07577cc54ade46e2222ff5dff93060cf9983a9c39b70c81d0f3f807a7098b6f9c8ae1adfc419850a65f0bbaa57f1cfc838d06592e9e6ebff43ec31a746625948a5dbf21b6139b9f67f87edc421f4c0edd88737d8c95d03f77c190b864f1",
            }
        ]

        # Test event with VariableData already in signature list format.
        test_event = {
            "VariableName": "d719b2cb-3d3a-4596-a3bc-dad00e67656f",
            "UnicodeName": "vendor_db",
            "VariableData": signature_list_format.copy(),
        }

        original_data = test_event["VariableData"].copy()

        # Apply enrichment
        tpm_bootlog_enrich.enrich_vendor_db_authority_variable(test_event)  # type: ignore[reportPossiblyUnboundVariable]

        # Verify that VariableData in signature list format remains unchanged
        self.assertEqual(test_event["VariableData"], original_data)


if __name__ == "__main__":
    unittest.main()
